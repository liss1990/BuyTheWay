// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/buytheway/protocol/sell.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "com/buytheway/protocol/Sell.pbobjc.h"
 #import "com/buytheway/protocol/Common.pbobjc.h"
 #import "com/buytheway/protocol/Business.pbobjc.h"
 #import "com/buytheway/protocol/Orders.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SellRoot

@implementation SellRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SellRoot_FileDescriptor

static GPBFileDescriptor *SellRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.buytheway.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SearchFlightInfoRequest

@implementation SearchFlightInfoRequest

@dynamic keyword;

typedef struct SearchFlightInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyword;
} SearchFlightInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = SearchFlightInfoRequest_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchFlightInfoRequest__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchFlightInfoRequest class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchFlightInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchFlightInfoResponse

@implementation SearchFlightInfoResponse

@dynamic hasRetCode, retCode;
@dynamic flightInfoArray, flightInfoArray_Count;

typedef struct SearchFlightInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *flightInfoArray;
} SearchFlightInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = SearchFlightInfoResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchFlightInfoResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "flightInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FlightInfo),
        .number = SearchFlightInfoResponse_FieldNumber_FlightInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchFlightInfoResponse__storage_, flightInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchFlightInfoResponse class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchFlightInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000flightInfo\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SellTripTaskRequest

@implementation SellTripTaskRequest

@dynamic hasTaskInfo, taskInfo;

typedef struct SellTripTaskRequest__storage_ {
  uint32_t _has_storage_[1];
  SellReleaseTripTask *taskInfo;
} SellTripTaskRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(SellReleaseTripTask),
        .number = SellTripTaskRequest_FieldNumber_TaskInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SellTripTaskRequest__storage_, taskInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SellTripTaskRequest class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SellTripTaskRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SellTripTaskResponse

@implementation SellTripTaskResponse

@dynamic hasRetCode, retCode;
@dynamic sellTripTaskId;

typedef struct SellTripTaskResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSString *sellTripTaskId;
} SellTripTaskResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = SellTripTaskResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SellTripTaskResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sellTripTaskId",
        .dataTypeSpecific.className = NULL,
        .number = SellTripTaskResponse_FieldNumber_SellTripTaskId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SellTripTaskResponse__storage_, sellTripTaskId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SellTripTaskResponse class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SellTripTaskResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SellReplyTripTaskRequest

@implementation SellReplyTripTaskRequest

@dynamic orderId;
@dynamic answer;
@dynamic mes;

typedef struct SellReplyTripTaskRequest__storage_ {
  uint32_t _has_storage_[1];
  MesCode mes;
  NSString *orderId;
} SellReplyTripTaskRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = SellReplyTripTaskRequest_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SellReplyTripTaskRequest__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "answer",
        .dataTypeSpecific.className = NULL,
        .number = SellReplyTripTaskRequest_FieldNumber_Answer,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "mes",
        .dataTypeSpecific.enumDescFunc = MesCode_EnumDescriptor,
        .number = SellReplyTripTaskRequest_FieldNumber_Mes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SellReplyTripTaskRequest__storage_, mes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SellReplyTripTaskRequest class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SellReplyTripTaskRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SellReplyTripTaskRequest_Mes_RawValue(SellReplyTripTaskRequest *message) {
  GPBDescriptor *descriptor = [SellReplyTripTaskRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SellReplyTripTaskRequest_FieldNumber_Mes];
  return GPBGetMessageInt32Field(message, field);
}

void SetSellReplyTripTaskRequest_Mes_RawValue(SellReplyTripTaskRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SellReplyTripTaskRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SellReplyTripTaskRequest_FieldNumber_Mes];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetSellTripTaskListResquest

@implementation GetSellTripTaskListResquest

@dynamic tripTaskStatuEnum;
@dynamic hasReq, req;

typedef struct GetSellTripTaskListResquest__storage_ {
  uint32_t _has_storage_[1];
  SellTripTaskStatuEnum tripTaskStatuEnum;
  PageDataRequest *req;
} GetSellTripTaskListResquest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tripTaskStatuEnum",
        .dataTypeSpecific.enumDescFunc = SellTripTaskStatuEnum_EnumDescriptor,
        .number = GetSellTripTaskListResquest_FieldNumber_TripTaskStatuEnum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSellTripTaskListResquest__storage_, tripTaskStatuEnum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "req",
        .dataTypeSpecific.className = GPBStringifySymbol(PageDataRequest),
        .number = GetSellTripTaskListResquest_FieldNumber_Req,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSellTripTaskListResquest__storage_, req),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSellTripTaskListResquest class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSellTripTaskListResquest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetSellTripTaskListResquest_TripTaskStatuEnum_RawValue(GetSellTripTaskListResquest *message) {
  GPBDescriptor *descriptor = [GetSellTripTaskListResquest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetSellTripTaskListResquest_FieldNumber_TripTaskStatuEnum];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetSellTripTaskListResquest_TripTaskStatuEnum_RawValue(GetSellTripTaskListResquest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetSellTripTaskListResquest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetSellTripTaskListResquest_FieldNumber_TripTaskStatuEnum];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetSellTripTaskListResponse

@implementation GetSellTripTaskListResponse

@dynamic hasRetCode, retCode;
@dynamic sellReleaseTripTaskListArray, sellReleaseTripTaskListArray_Count;

typedef struct GetSellTripTaskListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *sellReleaseTripTaskListArray;
} GetSellTripTaskListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetSellTripTaskListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSellTripTaskListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sellReleaseTripTaskListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SellReleaseTripTask),
        .number = GetSellTripTaskListResponse_FieldNumber_SellReleaseTripTaskListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSellTripTaskListResponse__storage_, sellReleaseTripTaskListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSellTripTaskListResponse class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSellTripTaskListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000sellReleaseTripTaskList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSellOrderListRequest

@implementation GetSellOrderListRequest

@dynamic orderStutus;
@dynamic hasReq, req;

typedef struct GetSellOrderListRequest__storage_ {
  uint32_t _has_storage_[1];
  OrderStatus orderStutus;
  PageDataRequest *req;
} GetSellOrderListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderStutus",
        .dataTypeSpecific.enumDescFunc = OrderStatus_EnumDescriptor,
        .number = GetSellOrderListRequest_FieldNumber_OrderStutus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSellOrderListRequest__storage_, orderStutus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "req",
        .dataTypeSpecific.className = GPBStringifySymbol(PageDataRequest),
        .number = GetSellOrderListRequest_FieldNumber_Req,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSellOrderListRequest__storage_, req),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSellOrderListRequest class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSellOrderListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetSellOrderListRequest_OrderStutus_RawValue(GetSellOrderListRequest *message) {
  GPBDescriptor *descriptor = [GetSellOrderListRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetSellOrderListRequest_FieldNumber_OrderStutus];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetSellOrderListRequest_OrderStutus_RawValue(GetSellOrderListRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetSellOrderListRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetSellOrderListRequest_FieldNumber_OrderStutus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetSellOrderListResponse

@implementation GetSellOrderListResponse

@dynamic hasRetCode, retCode;
@dynamic orderListArray, orderListArray_Count;

typedef struct GetSellOrderListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *orderListArray;
} GetSellOrderListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetSellOrderListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSellOrderListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderInfo),
        .number = GetSellOrderListResponse_FieldNumber_OrderListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSellOrderListResponse__storage_, orderListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSellOrderListResponse class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSellOrderListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000orderList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchCityRequest

@implementation SearchCityRequest

@dynamic keyword;

typedef struct SearchCityRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyword;
} SearchCityRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = SearchCityRequest_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchCityRequest__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchCityRequest class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchCityRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommonCityRequest

@implementation CommonCityRequest

@dynamic keyword;

typedef struct CommonCityRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyword;
} CommonCityRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = CommonCityRequest_FieldNumber_Keyword,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonCityRequest__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonCityRequest class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonCityRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchCityResponse

@implementation SearchCityResponse

@dynamic hasRetCode, retCode;
@dynamic cityInfoArray, cityInfoArray_Count;

typedef struct SearchCityResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *cityInfoArray;
} SearchCityResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = SearchCityResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchCityResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cityInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CityInfo),
        .number = SearchCityResponse_FieldNumber_CityInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchCityResponse__storage_, cityInfoArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchCityResponse class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchCityResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000cityInfo\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SellReleaseTripTask

@implementation SellReleaseTripTask

@dynamic sellTripTaskId;
@dynamic hasFlightInfo, flightInfo;
@dynamic hasConsignSpace, consignSpace;
@dynamic hasHandbagSpace, handbagSpace;
@dynamic deadLineTime;
@dynamic hasAddress, address;
@dynamic hasConsigneePhone, consigneePhone;
@dynamic consigneeName;
@dynamic createTime;

typedef struct SellReleaseTripTask__storage_ {
  uint32_t _has_storage_[1];
  NSString *sellTripTaskId;
  FlightInfo *flightInfo;
  SpaceInfo *consignSpace;
  SpaceInfo *handbagSpace;
  AddressInfo *address;
  PhoneNumber *consigneePhone;
  NSString *consigneeName;
  int64_t deadLineTime;
  int64_t createTime;
} SellReleaseTripTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sellTripTaskId",
        .dataTypeSpecific.className = NULL,
        .number = SellReleaseTripTask_FieldNumber_SellTripTaskId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, sellTripTaskId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flightInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(FlightInfo),
        .number = SellReleaseTripTask_FieldNumber_FlightInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, flightInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consignSpace",
        .dataTypeSpecific.className = GPBStringifySymbol(SpaceInfo),
        .number = SellReleaseTripTask_FieldNumber_ConsignSpace,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, consignSpace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "handbagSpace",
        .dataTypeSpecific.className = GPBStringifySymbol(SpaceInfo),
        .number = SellReleaseTripTask_FieldNumber_HandbagSpace,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, handbagSpace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deadLineTime",
        .dataTypeSpecific.className = NULL,
        .number = SellReleaseTripTask_FieldNumber_DeadLineTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, deadLineTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(AddressInfo),
        .number = SellReleaseTripTask_FieldNumber_Address,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consigneePhone",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumber),
        .number = SellReleaseTripTask_FieldNumber_ConsigneePhone,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, consigneePhone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consigneeName",
        .dataTypeSpecific.className = NULL,
        .number = SellReleaseTripTask_FieldNumber_ConsigneeName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, consigneeName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = SellReleaseTripTask_FieldNumber_CreateTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SellReleaseTripTask__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SellReleaseTripTask class]
                                     rootClass:[SellRoot class]
                                          file:SellRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SellReleaseTripTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\016\000\002\n\000\003\014\000\004\014\000\005\014\000\007\016\000\010\r\000\t\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
