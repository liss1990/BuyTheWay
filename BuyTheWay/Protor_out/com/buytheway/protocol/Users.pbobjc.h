// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/buytheway/protocol/users.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class PhoneNumber;
@class RetCode;
@class User;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum IdentityTypeEnum

/** 登陆类型枚举 */
typedef GPB_ENUM(IdentityTypeEnum) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  IdentityTypeEnum_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  IdentityTypeEnum_UnknownIdentifyType = 0,

  /** 站内电话注册 */
  IdentityTypeEnum_Mobile = 1,

  /** 站内邮箱注册 */
  IdentityTypeEnum_Email = 2,

  /** 站内用户名注册 */
  IdentityTypeEnum_Username = 3,

  /** facebook注册 */
  IdentityTypeEnum_Facebook = 4,

  /** 微信注册 */
  IdentityTypeEnum_Wechat = 5,

  /** twitter注册 */
  IdentityTypeEnum_Twitter = 6,
};

GPBEnumDescriptor *IdentityTypeEnum_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL IdentityTypeEnum_IsValidValue(int32_t value);

#pragma mark - Enum SmsType

typedef GPB_ENUM(SmsType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SmsType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SmsType_UnknownSmsType = 0,

  /** 注册短信 */
  SmsType_Register = 1,

  /** 重置密码短信 */
  SmsType_Resetpwd = 2,
};

GPBEnumDescriptor *SmsType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SmsType_IsValidValue(int32_t value);

#pragma mark - UsersRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface UsersRoot : GPBRootObject
@end

#pragma mark - GetPubKeyRequest

typedef GPB_ENUM(GetPubKeyRequest_FieldNumber) {
  GetPubKeyRequest_FieldNumber_Account = 1,
  GetPubKeyRequest_FieldNumber_AesKey = 2,
};

/**
 * 取加密密钥 /users/getkey
 **/
@interface GetPubKeyRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *account;

@property(nonatomic, readwrite, copy, null_resettable) NSData *aesKey;

@end

#pragma mark - GetPubKeyResponse

typedef GPB_ENUM(GetPubKeyResponse_FieldNumber) {
  GetPubKeyResponse_FieldNumber_RetCode = 1,
  GetPubKeyResponse_FieldNumber_Token = 2,
  GetPubKeyResponse_FieldNumber_RsaModule = 4,
  GetPubKeyResponse_FieldNumber_RsaPubKey = 5,
};

@interface GetPubKeyResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) RetCode *retCode;
/** Test to see if @c retCode has been set. */
@property(nonatomic, readwrite) BOOL hasRetCode;

/** 成功才会有以一字段 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@property(nonatomic, readwrite, copy, null_resettable) NSData *rsaModule;

@property(nonatomic, readwrite, copy, null_resettable) NSData *rsaPubKey;

@end

#pragma mark - RegisterRequest

typedef GPB_ENUM(RegisterRequest_FieldNumber) {
  RegisterRequest_FieldNumber_PhoneNumber = 1,
  RegisterRequest_FieldNumber_Code = 2,
  RegisterRequest_FieldNumber_Pwd = 3,
  RegisterRequest_FieldNumber_NickName = 4,
  RegisterRequest_FieldNumber_IdentityType = 5,
  RegisterRequest_FieldNumber_Identifier = 6,
  RegisterRequest_FieldNumber_Credential = 7,
  RegisterRequest_FieldNumber_IsBind = 8,
};

/**
 * 用户注册 /users/register
 **/
@interface RegisterRequest : GPBMessage

/** 这部分字段是注册公用字段，所有的注册都会转到手机注册来 */
@property(nonatomic, readwrite, strong, null_resettable) PhoneNumber *phoneNumber;
/** Test to see if @c phoneNumber has been set. */
@property(nonatomic, readwrite) BOOL hasPhoneNumber;

/** 验证码 此处只支持数字类型验证码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *code;

/** 密码 是否需要加密后再传输？ md5 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pwd;

/** 昵称 ，此昵称会单独提供一个接口来校验是否合法，整个系统唯一 ，本次需求是在注册成功后 再写昵称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nickName;

/** 后面的字段是第三方平台授权登陆后 的id 跟token */
@property(nonatomic, readwrite) IdentityTypeEnum identityType;

/** 标识（手机号 邮箱 用户名或第三方应用的唯一标识）,邮箱跟用户名登陆暂时没有 后续也可以存储到里面 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;

/** 站内的保存密码及跟pwd相同，站外的不保存或保存token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *credential;

/** 注册流程为0 绑定账户传1 */
@property(nonatomic, readwrite) int32_t isBind;

@end

/**
 * Fetches the raw value of a @c RegisterRequest's @c identityType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RegisterRequest_IdentityType_RawValue(RegisterRequest *message);
/**
 * Sets the raw value of an @c RegisterRequest's @c identityType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRegisterRequest_IdentityType_RawValue(RegisterRequest *message, int32_t value);

#pragma mark - RegisterResponse

typedef GPB_ENUM(RegisterResponse_FieldNumber) {
  RegisterResponse_FieldNumber_RetCode = 1,
  RegisterResponse_FieldNumber_User = 2,
};

/**
 * 用户注册 返回
 **/
@interface RegisterResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) RetCode *retCode;
/** Test to see if @c retCode has been set. */
@property(nonatomic, readwrite) BOOL hasRetCode;

/** 用户对象 */
@property(nonatomic, readwrite, strong, null_resettable) User *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@end

#pragma mark - GetSmsRequest

typedef GPB_ENUM(GetSmsRequest_FieldNumber) {
  GetSmsRequest_FieldNumber_PhoneNumber = 1,
  GetSmsRequest_FieldNumber_SmsType = 2,
};

/**
 * 用户获得短信验证码 /users/getSmsCode   ,此方法 后台会控制60s内同一个号码只允许一次，前端需要自行控制
 **/
@interface GetSmsRequest : GPBMessage

/** 用户电话 */
@property(nonatomic, readwrite, strong, null_resettable) PhoneNumber *phoneNumber;
/** Test to see if @c phoneNumber has been set. */
@property(nonatomic, readwrite) BOOL hasPhoneNumber;

/** 短信类型 */
@property(nonatomic, readwrite) SmsType smsType;

@end

/**
 * Fetches the raw value of a @c GetSmsRequest's @c smsType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t GetSmsRequest_SmsType_RawValue(GetSmsRequest *message);
/**
 * Sets the raw value of an @c GetSmsRequest's @c smsType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetGetSmsRequest_SmsType_RawValue(GetSmsRequest *message, int32_t value);

#pragma mark - GetSmsResponse

typedef GPB_ENUM(GetSmsResponse_FieldNumber) {
  GetSmsResponse_FieldNumber_RetCode = 1,
};

/**
 * 用户获得短信验证码返回
 **/
@interface GetSmsResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) RetCode *retCode;
/** Test to see if @c retCode has been set. */
@property(nonatomic, readwrite) BOOL hasRetCode;

@end

#pragma mark - RegisterAfterRequest

typedef GPB_ENUM(RegisterAfterRequest_FieldNumber) {
  RegisterAfterRequest_FieldNumber_UserBizid = 1,
  RegisterAfterRequest_FieldNumber_NickName = 2,
  RegisterAfterRequest_FieldNumber_HeadImage = 3,
  RegisterAfterRequest_FieldNumber_Country = 10,
  RegisterAfterRequest_FieldNumber_Language = 11,
  RegisterAfterRequest_FieldNumber_CurrencynUit = 12,
  RegisterAfterRequest_FieldNumber_AliCreditScore = 20,
  RegisterAfterRequest_FieldNumber_GeiTuiPushId = 30,
  RegisterAfterRequest_FieldNumber_ApnsId = 31,
  RegisterAfterRequest_FieldNumber_GpnsId = 32,
};

/**
 * 注册成功后 补全用户 信息 昵称 头像 /users/registerAfter
 **/
@interface RegisterAfterRequest : GPBMessage

/** 用户的基本信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userBizid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *nickName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *headImage;

/** 用户配置信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *country;

/** 语言 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;

/** 用户设置的货币单位 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *currencynUit;

/** 用户信用信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *aliCreditScore;

/** 该用户绑定的推送信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *geiTuiPushId;

/** apple push id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *apnsId;

/** google push id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *gpnsId;

@end

#pragma mark - RegisterAfterResponse

typedef GPB_ENUM(RegisterAfterResponse_FieldNumber) {
  RegisterAfterResponse_FieldNumber_RetCode = 1,
};

/**
 * 注册成功后 补全用户信息  的返回
 **/
@interface RegisterAfterResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) RetCode *retCode;
/** Test to see if @c retCode has been set. */
@property(nonatomic, readwrite) BOOL hasRetCode;

@end

#pragma mark - LoginRequest

typedef GPB_ENUM(LoginRequest_FieldNumber) {
  LoginRequest_FieldNumber_IdentityType = 1,
  LoginRequest_FieldNumber_Identifier = 2,
  LoginRequest_FieldNumber_Credential = 3,
  LoginRequest_FieldNumber_AesKey = 4,
  LoginRequest_FieldNumber_DeviceType = 5,
};

/**
 * //登陆
 * 登陆请求 /users/login
 **/
@interface LoginRequest : GPBMessage

/** 登录类型（手机号 邮箱 用户名,邮箱跟用户名暂时没有，不管）或第三方应用名称（微信 等）facebook  WeChat twitter */
@property(nonatomic, readwrite) IdentityTypeEnum identityType;

/** 标识（手机号 邮箱 用户名或第三方应用的唯一标识）,邮箱跟用户名登陆暂时没有 后续也可以存储到里面 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;

/** 站内的保存密码及跟pwd相同，站外的不保存或保存token */
@property(nonatomic, readwrite, copy, null_resettable) NSString *credential;

@property(nonatomic, readwrite, copy, null_resettable) NSData *aesKey;

/**
 * * 登录所用设备，不同设备发推送的方式不一样，
 * 1:Android 2:Ios 3:Windos(预留）
 **/
@property(nonatomic, readwrite) int32_t deviceType;

@end

/**
 * Fetches the raw value of a @c LoginRequest's @c identityType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t LoginRequest_IdentityType_RawValue(LoginRequest *message);
/**
 * Sets the raw value of an @c LoginRequest's @c identityType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLoginRequest_IdentityType_RawValue(LoginRequest *message, int32_t value);

#pragma mark - LoginResponse

typedef GPB_ENUM(LoginResponse_FieldNumber) {
  LoginResponse_FieldNumber_RetCode = 1,
  LoginResponse_FieldNumber_User = 2,
  LoginResponse_FieldNumber_Token = 3,
  LoginResponse_FieldNumber_SignKey = 4,
};

/**
 * 登陆返回结果
 **/
@interface LoginResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) RetCode *retCode;
/** Test to see if @c retCode has been set. */
@property(nonatomic, readwrite) BOOL hasRetCode;

/** 用户对象 */
@property(nonatomic, readwrite, strong, null_resettable) User *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@property(nonatomic, readwrite, copy, null_resettable) NSString *signKey;

@end

#pragma mark - BindThirdUserRequest

typedef GPB_ENUM(BindThirdUserRequest_FieldNumber) {
  BindThirdUserRequest_FieldNumber_UserBizid = 1,
  BindThirdUserRequest_FieldNumber_IdentityType = 2,
  BindThirdUserRequest_FieldNumber_Identifier = 3,
  BindThirdUserRequest_FieldNumber_Credential = 4,
};

/**
 * 绑定第三方 /users/bind
 **/
@interface BindThirdUserRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *userBizid;

/** 登录类型（手机号 邮箱 用户名,邮箱跟用户名暂时没有，不管）或第三方应用名称（微信 等）facebook  WeChat twitter */
@property(nonatomic, readwrite) IdentityTypeEnum identityType;

/** 标识（手机号 邮箱 用户名或第三方应用的唯一标识）,邮箱跟用户名登陆暂时没有 后续也可以存储到里面 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identifier;

/** 站内的保存密码及跟pwd相同，站外的不保存或保存token 可以不填写 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *credential;

@end

/**
 * Fetches the raw value of a @c BindThirdUserRequest's @c identityType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t BindThirdUserRequest_IdentityType_RawValue(BindThirdUserRequest *message);
/**
 * Sets the raw value of an @c BindThirdUserRequest's @c identityType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetBindThirdUserRequest_IdentityType_RawValue(BindThirdUserRequest *message, int32_t value);

#pragma mark - BindThirdUserResponse

typedef GPB_ENUM(BindThirdUserResponse_FieldNumber) {
  BindThirdUserResponse_FieldNumber_RetCode = 1,
};

@interface BindThirdUserResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) RetCode *retCode;
/** Test to see if @c retCode has been set. */
@property(nonatomic, readwrite) BOOL hasRetCode;

@end

#pragma mark - ResetPwdRequest

typedef GPB_ENUM(ResetPwdRequest_FieldNumber) {
  ResetPwdRequest_FieldNumber_PhoneNumber = 1,
  ResetPwdRequest_FieldNumber_Code = 2,
  ResetPwdRequest_FieldNumber_Pwd = 3,
};

/**
 * 重置用户密码 /users/resetPwd
 **/
@interface ResetPwdRequest : GPBMessage

/** 手机号 */
@property(nonatomic, readwrite, strong, null_resettable) PhoneNumber *phoneNumber;
/** Test to see if @c phoneNumber has been set. */
@property(nonatomic, readwrite) BOOL hasPhoneNumber;

/** 验证码 此处只支持数字类型验证码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *code;

/** 密码 是否需要加密后再传输？ md5 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pwd;

@end

#pragma mark - ResetPwdResponse

typedef GPB_ENUM(ResetPwdResponse_FieldNumber) {
  ResetPwdResponse_FieldNumber_RetCode = 1,
};

@interface ResetPwdResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) RetCode *retCode;
/** Test to see if @c retCode has been set. */
@property(nonatomic, readwrite) BOOL hasRetCode;

@end

#pragma mark - User

typedef GPB_ENUM(User_FieldNumber) {
  User_FieldNumber_UserBizid = 1,
  User_FieldNumber_PhoneNumber = 2,
  User_FieldNumber_NickName = 3,
  User_FieldNumber_Name = 4,
  User_FieldNumber_HeadImage = 5,
};

/**
 * 用户对象
 **/
@interface User : GPBMessage

/** 用户登录业务标识，对应后台的bizid */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userBizid;

/** 用户电话 */
@property(nonatomic, readwrite, strong, null_resettable) PhoneNumber *phoneNumber;
/** Test to see if @c phoneNumber has been set. */
@property(nonatomic, readwrite) BOOL hasPhoneNumber;

/** 昵称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nickName;

/** 真实姓名，可能为空 注册后才有 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 头像 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *headImage;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
