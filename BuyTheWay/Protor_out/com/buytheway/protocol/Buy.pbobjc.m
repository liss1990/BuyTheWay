// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/buytheway/protocol/buy.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "com/buytheway/protocol/Buy.pbobjc.h"
 #import "com/buytheway/protocol/Common.pbobjc.h"
 #import "com/buytheway/protocol/Business.pbobjc.h"
 #import "com/buytheway/protocol/Orders.pbobjc.h"
 #import "com/buytheway/protocol/Amount.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BuyRoot

@implementation BuyRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BuyRoot_FileDescriptor

static GPBFileDescriptor *BuyRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.buytheway.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BuyTripTaskRequest

@implementation BuyTripTaskRequest

@dynamic hasTaskInfo, taskInfo;

typedef struct BuyTripTaskRequest__storage_ {
  uint32_t _has_storage_[1];
  BuyTripTaskInfo *taskInfo;
} BuyTripTaskRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(BuyTripTaskInfo),
        .number = BuyTripTaskRequest_FieldNumber_TaskInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuyTripTaskRequest__storage_, taskInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuyTripTaskRequest class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuyTripTaskRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BuyTripTaskResponse

@implementation BuyTripTaskResponse

@dynamic hasRetCode, retCode;
@dynamic buyTripTaskId;

typedef struct BuyTripTaskResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSString *buyTripTaskId;
} BuyTripTaskResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = BuyTripTaskResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuyTripTaskResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buyTripTaskId",
        .dataTypeSpecific.className = NULL,
        .number = BuyTripTaskResponse_FieldNumber_BuyTripTaskId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuyTripTaskResponse__storage_, buyTripTaskId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuyTripTaskResponse class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuyTripTaskResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MarrySellTripTaskListRequest

@implementation MarrySellTripTaskListRequest

@dynamic buyTripTaskId;

typedef struct MarrySellTripTaskListRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *buyTripTaskId;
} MarrySellTripTaskListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "buyTripTaskId",
        .dataTypeSpecific.className = NULL,
        .number = MarrySellTripTaskListRequest_FieldNumber_BuyTripTaskId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MarrySellTripTaskListRequest__storage_, buyTripTaskId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MarrySellTripTaskListRequest class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MarrySellTripTaskListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MarrySellTripTaskListResponse

@implementation MarrySellTripTaskListResponse

@dynamic hasRetCode, retCode;
@dynamic marrySellTripTaskArray, marrySellTripTaskArray_Count;
@dynamic buyTripTaskid;

typedef struct MarrySellTripTaskListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *marrySellTripTaskArray;
  NSString *buyTripTaskid;
} MarrySellTripTaskListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = MarrySellTripTaskListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MarrySellTripTaskListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "marrySellTripTaskArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SellTripTask),
        .number = MarrySellTripTaskListResponse_FieldNumber_MarrySellTripTaskArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MarrySellTripTaskListResponse__storage_, marrySellTripTaskArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "buyTripTaskid",
        .dataTypeSpecific.className = NULL,
        .number = MarrySellTripTaskListResponse_FieldNumber_BuyTripTaskid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MarrySellTripTaskListResponse__storage_, buyTripTaskid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MarrySellTripTaskListResponse class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MarrySellTripTaskListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\000marrySellTripTask\000\003\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBuyTripTaskListRequest

@implementation GetBuyTripTaskListRequest

@dynamic hasReq, req;

typedef struct GetBuyTripTaskListRequest__storage_ {
  uint32_t _has_storage_[1];
  PageDataRequest *req;
} GetBuyTripTaskListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "req",
        .dataTypeSpecific.className = GPBStringifySymbol(PageDataRequest),
        .number = GetBuyTripTaskListRequest_FieldNumber_Req,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBuyTripTaskListRequest__storage_, req),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBuyTripTaskListRequest class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBuyTripTaskListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBuyTripTaskListResponse

@implementation GetBuyTripTaskListResponse

@dynamic hasRetCode, retCode;
@dynamic taskListArray, taskListArray_Count;

typedef struct GetBuyTripTaskListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *taskListArray;
} GetBuyTripTaskListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetBuyTripTaskListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBuyTripTaskListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "taskListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BuyTripTaskInfo),
        .number = GetBuyTripTaskListResponse_FieldNumber_TaskListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetBuyTripTaskListResponse__storage_, taskListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBuyTripTaskListResponse class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBuyTripTaskListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000taskList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BuyMarrySellTripTaskRequest

@implementation BuyMarrySellTripTaskRequest

@dynamic sellTripTaskid;
@dynamic buyTripTaskid;

typedef struct BuyMarrySellTripTaskRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *sellTripTaskid;
  NSString *buyTripTaskid;
} BuyMarrySellTripTaskRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sellTripTaskid",
        .dataTypeSpecific.className = NULL,
        .number = BuyMarrySellTripTaskRequest_FieldNumber_SellTripTaskid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuyMarrySellTripTaskRequest__storage_, sellTripTaskid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buyTripTaskid",
        .dataTypeSpecific.className = NULL,
        .number = BuyMarrySellTripTaskRequest_FieldNumber_BuyTripTaskid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuyMarrySellTripTaskRequest__storage_, buyTripTaskid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuyMarrySellTripTaskRequest class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuyMarrySellTripTaskRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\016\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BuyMarrySellTripTaskRespons

@implementation BuyMarrySellTripTaskRespons

@dynamic hasRetCode, retCode;
@dynamic orderId;

typedef struct BuyMarrySellTripTaskRespons__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSString *orderId;
} BuyMarrySellTripTaskRespons__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = BuyMarrySellTripTaskRespons_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuyMarrySellTripTaskRespons__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = BuyMarrySellTripTaskRespons_FieldNumber_OrderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuyMarrySellTripTaskRespons__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuyMarrySellTripTaskRespons class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuyMarrySellTripTaskRespons__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBuyOrderListRequest

@implementation GetBuyOrderListRequest

@dynamic orderStutus;
@dynamic hasReq, req;

typedef struct GetBuyOrderListRequest__storage_ {
  uint32_t _has_storage_[1];
  OrderStatus orderStutus;
  PageDataRequest *req;
} GetBuyOrderListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderStutus",
        .dataTypeSpecific.enumDescFunc = OrderStatus_EnumDescriptor,
        .number = GetBuyOrderListRequest_FieldNumber_OrderStutus,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBuyOrderListRequest__storage_, orderStutus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "req",
        .dataTypeSpecific.className = GPBStringifySymbol(PageDataRequest),
        .number = GetBuyOrderListRequest_FieldNumber_Req,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBuyOrderListRequest__storage_, req),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBuyOrderListRequest class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBuyOrderListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetBuyOrderListRequest_OrderStutus_RawValue(GetBuyOrderListRequest *message) {
  GPBDescriptor *descriptor = [GetBuyOrderListRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetBuyOrderListRequest_FieldNumber_OrderStutus];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetBuyOrderListRequest_OrderStutus_RawValue(GetBuyOrderListRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetBuyOrderListRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetBuyOrderListRequest_FieldNumber_OrderStutus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetBuyOrderListResponse

@implementation GetBuyOrderListResponse

@dynamic hasRetCode, retCode;
@dynamic orderListArray, orderListArray_Count;

typedef struct GetBuyOrderListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *orderListArray;
} GetBuyOrderListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetBuyOrderListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBuyOrderListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderInfo),
        .number = GetBuyOrderListResponse_FieldNumber_OrderListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetBuyOrderListResponse__storage_, orderListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBuyOrderListResponse class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBuyOrderListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000orderList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BuyTripTaskInfo

@implementation BuyTripTaskInfo

@dynamic buyTripTaskId;
@dynamic hasBuySpace, buySpace;
@dynamic spaceImageArray, spaceImageArray_Count;
@dynamic hasStartAddresseeInfo, startAddresseeInfo;
@dynamic hasEndAddressInfo, endAddressInfo;
@dynamic deadLineTime;
@dynamic hasBudgetMoney, budgetMoney;

typedef struct BuyTripTaskInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *buyTripTaskId;
  SpaceInfo *buySpace;
  NSMutableArray *spaceImageArray;
  AddresseeInfo *startAddresseeInfo;
  AddresseeInfo *endAddressInfo;
  Money *budgetMoney;
  int64_t deadLineTime;
} BuyTripTaskInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "buyTripTaskId",
        .dataTypeSpecific.className = NULL,
        .number = BuyTripTaskInfo_FieldNumber_BuyTripTaskId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BuyTripTaskInfo__storage_, buyTripTaskId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "buySpace",
        .dataTypeSpecific.className = GPBStringifySymbol(SpaceInfo),
        .number = BuyTripTaskInfo_FieldNumber_BuySpace,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BuyTripTaskInfo__storage_, buySpace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "spaceImageArray",
        .dataTypeSpecific.className = NULL,
        .number = BuyTripTaskInfo_FieldNumber_SpaceImageArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BuyTripTaskInfo__storage_, spaceImageArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startAddresseeInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(AddresseeInfo),
        .number = BuyTripTaskInfo_FieldNumber_StartAddresseeInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BuyTripTaskInfo__storage_, startAddresseeInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endAddressInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(AddresseeInfo),
        .number = BuyTripTaskInfo_FieldNumber_EndAddressInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BuyTripTaskInfo__storage_, endAddressInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deadLineTime",
        .dataTypeSpecific.className = NULL,
        .number = BuyTripTaskInfo_FieldNumber_DeadLineTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BuyTripTaskInfo__storage_, deadLineTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "budgetMoney",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = BuyTripTaskInfo_FieldNumber_BudgetMoney,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BuyTripTaskInfo__storage_, budgetMoney),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BuyTripTaskInfo class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BuyTripTaskInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\r\000\002\010\000\003\000spaceImage\000\004\022\000\005\016\000\006\014\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SellTripTask

@implementation SellTripTask

@dynamic sellTripTaskid;
@dynamic hasStartAddress, startAddress;
@dynamic hasEndAddressInfo, endAddressInfo;
@dynamic beginTime;
@dynamic endTime;
@dynamic hasConsignSpace, consignSpace;
@dynamic hasHandbagSpace, handbagSpace;

typedef struct SellTripTask__storage_ {
  uint32_t _has_storage_[1];
  NSString *sellTripTaskid;
  AddressInfo *startAddress;
  AddresseeInfo *endAddressInfo;
  SpaceInfo *consignSpace;
  SpaceInfo *handbagSpace;
  int64_t beginTime;
  int64_t endTime;
} SellTripTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sellTripTaskid",
        .dataTypeSpecific.className = NULL,
        .number = SellTripTask_FieldNumber_SellTripTaskid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SellTripTask__storage_, sellTripTaskid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startAddress",
        .dataTypeSpecific.className = GPBStringifySymbol(AddressInfo),
        .number = SellTripTask_FieldNumber_StartAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SellTripTask__storage_, startAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endAddressInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(AddresseeInfo),
        .number = SellTripTask_FieldNumber_EndAddressInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SellTripTask__storage_, endAddressInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = SellTripTask_FieldNumber_BeginTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SellTripTask__storage_, beginTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = SellTripTask_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SellTripTask__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "consignSpace",
        .dataTypeSpecific.className = GPBStringifySymbol(SpaceInfo),
        .number = SellTripTask_FieldNumber_ConsignSpace,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SellTripTask__storage_, consignSpace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "handbagSpace",
        .dataTypeSpecific.className = GPBStringifySymbol(SpaceInfo),
        .number = SellTripTask_FieldNumber_HandbagSpace,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SellTripTask__storage_, handbagSpace),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SellTripTask class]
                                     rootClass:[BuyRoot class]
                                          file:BuyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SellTripTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\016\000\002\014\000\003\016\000\004\t\000\005\007\000\006\014\000\007\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
