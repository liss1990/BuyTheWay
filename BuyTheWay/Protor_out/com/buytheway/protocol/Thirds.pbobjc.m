// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/buytheway/protocol/thirds.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "com/buytheway/protocol/Thirds.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ThirdsRoot

@implementation ThirdsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ThirdsRoot_FileDescriptor

static GPBFileDescriptor *ThirdsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.buytheway.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum QiniuTokenTypeEnum

GPBEnumDescriptor *QiniuTokenTypeEnum_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Simpl\000Cover\000Custom\000CustomBack\000";
    static const int32_t values[] = {
        QiniuTokenTypeEnum_Simpl,
        QiniuTokenTypeEnum_Cover,
        QiniuTokenTypeEnum_Custom,
        QiniuTokenTypeEnum_CustomBack,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(QiniuTokenTypeEnum)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:QiniuTokenTypeEnum_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL QiniuTokenTypeEnum_IsValidValue(int32_t value__) {
  switch (value__) {
    case QiniuTokenTypeEnum_Simpl:
    case QiniuTokenTypeEnum_Cover:
    case QiniuTokenTypeEnum_Custom:
    case QiniuTokenTypeEnum_CustomBack:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetQiniuTokenRequest

@implementation GetQiniuTokenRequest

@dynamic tokenType;

typedef struct GetQiniuTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  QiniuTokenTypeEnum tokenType;
} GetQiniuTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenType",
        .dataTypeSpecific.enumDescFunc = QiniuTokenTypeEnum_EnumDescriptor,
        .number = GetQiniuTokenRequest_FieldNumber_TokenType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetQiniuTokenRequest__storage_, tokenType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetQiniuTokenRequest class]
                                     rootClass:[ThirdsRoot class]
                                          file:ThirdsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetQiniuTokenRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetQiniuTokenRequest_TokenType_RawValue(GetQiniuTokenRequest *message) {
  GPBDescriptor *descriptor = [GetQiniuTokenRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetQiniuTokenRequest_FieldNumber_TokenType];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetQiniuTokenRequest_TokenType_RawValue(GetQiniuTokenRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetQiniuTokenRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetQiniuTokenRequest_FieldNumber_TokenType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetQiniuTokenResponse

@implementation GetQiniuTokenResponse

@dynamic qiNiuToken;

typedef struct GetQiniuTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *qiNiuToken;
} GetQiniuTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "qiNiuToken",
        .dataTypeSpecific.className = NULL,
        .number = GetQiniuTokenResponse_FieldNumber_QiNiuToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetQiniuTokenResponse__storage_, qiNiuToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetQiniuTokenResponse class]
                                     rootClass:[ThirdsRoot class]
                                          file:ThirdsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetQiniuTokenResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
