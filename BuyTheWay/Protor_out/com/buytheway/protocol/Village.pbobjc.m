// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/buytheway/protocol/village.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "com/buytheway/protocol/Village.pbobjc.h"
 #import "com/buytheway/protocol/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - VillageRoot

@implementation VillageRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - VillageRoot_FileDescriptor

static GPBFileDescriptor *VillageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.buytheway.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GetVillageListRequest

@implementation GetVillageListRequest

@dynamic ownerId;
@dynamic hasLocation, location;
@dynamic keyword;
@dynamic joined;

typedef struct GetVillageListRequest__storage_ {
  uint32_t _has_storage_[1];
  Location *location;
  NSString *keyword;
  int64_t ownerId;
} GetVillageListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerId",
        .dataTypeSpecific.className = NULL,
        .number = GetVillageListRequest_FieldNumber_OwnerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVillageListRequest__storage_, ownerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .number = GetVillageListRequest_FieldNumber_Location,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVillageListRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = GetVillageListRequest_FieldNumber_Keyword,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVillageListRequest__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "joined",
        .dataTypeSpecific.className = NULL,
        .number = GetVillageListRequest_FieldNumber_Joined,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVillageListRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVillageListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVillageListResponse

@implementation GetVillageListResponse

@dynamic hasRetCode, retCode;
@dynamic villagesArray, villagesArray_Count;

typedef struct GetVillageListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *villagesArray;
} GetVillageListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetVillageListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVillageListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "villagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Village),
        .number = GetVillageListResponse_FieldNumber_VillagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetVillageListResponse__storage_, villagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVillageListResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVillageListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VillageRequest

@implementation VillageRequest

@dynamic hasLocation, location;
@dynamic name;
@dynamic logo;
@dynamic cover;

typedef struct VillageRequest__storage_ {
  uint32_t _has_storage_[1];
  Location *location;
  NSString *name;
  NSString *logo;
  NSString *cover;
} VillageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .number = VillageRequest_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VillageRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = VillageRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VillageRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logo",
        .dataTypeSpecific.className = NULL,
        .number = VillageRequest_FieldNumber_Logo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VillageRequest__storage_, logo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cover",
        .dataTypeSpecific.className = NULL,
        .number = VillageRequest_FieldNumber_Cover,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VillageRequest__storage_, cover),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VillageRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VillageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VillageResponse

@implementation VillageResponse

@dynamic hasRetCode, retCode;
@dynamic villageIdArray, villageIdArray_Count;

typedef struct VillageResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  GPBInt64Array *villageIdArray;
} VillageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = VillageResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VillageResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "villageIdArray",
        .dataTypeSpecific.className = NULL,
        .number = VillageResponse_FieldNumber_VillageIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VillageResponse__storage_, villageIdArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VillageResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VillageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\000villageId\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVillagerIdListRequest

@implementation GetVillagerIdListRequest

@dynamic villageId;
@dynamic keyword;

typedef struct GetVillagerIdListRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyword;
  int64_t villageId;
} GetVillagerIdListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "villageId",
        .dataTypeSpecific.className = NULL,
        .number = GetVillagerIdListRequest_FieldNumber_VillageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVillagerIdListRequest__storage_, villageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.className = NULL,
        .number = GetVillagerIdListRequest_FieldNumber_Keyword,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVillagerIdListRequest__storage_, keyword),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVillagerIdListRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVillagerIdListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVillagerIdListResponse

@implementation GetVillagerIdListResponse

@dynamic hasRetCode, retCode;
@dynamic villagersArray, villagersArray_Count;

typedef struct GetVillagerIdListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  GPBInt64Array *villagersArray;
} GetVillagerIdListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetVillagerIdListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVillagerIdListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "villagersArray",
        .dataTypeSpecific.className = NULL,
        .number = GetVillagerIdListResponse_FieldNumber_VillagersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetVillagerIdListResponse__storage_, villagersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVillagerIdListResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVillagerIdListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVillagerInfoListRequest

@implementation GetVillagerInfoListRequest

@dynamic villagersArray, villagersArray_Count;

typedef struct GetVillagerInfoListRequest__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *villagersArray;
} GetVillagerInfoListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "villagersArray",
        .dataTypeSpecific.className = NULL,
        .number = GetVillagerInfoListRequest_FieldNumber_VillagersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetVillagerInfoListRequest__storage_, villagersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVillagerInfoListRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVillagerInfoListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVillagerInfoListResponse

@implementation GetVillagerInfoListResponse

@dynamic hasRetCode, retCode;
@dynamic villagersArray, villagersArray_Count;

typedef struct GetVillagerInfoListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *villagersArray;
} GetVillagerInfoListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetVillagerInfoListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVillagerInfoListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "villagersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Villager),
        .number = GetVillagerInfoListResponse_FieldNumber_VillagersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetVillagerInfoListResponse__storage_, villagersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVillagerInfoListResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVillagerInfoListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JoinVillageRequest

@implementation JoinVillageRequest

@dynamic villageId;

typedef struct JoinVillageRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t villageId;
} JoinVillageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "villageId",
        .dataTypeSpecific.className = NULL,
        .number = JoinVillageRequest_FieldNumber_VillageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JoinVillageRequest__storage_, villageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JoinVillageRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JoinVillageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JoinVillageResponse

@implementation JoinVillageResponse

@dynamic hasRetCode, retCode;

typedef struct JoinVillageResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
} JoinVillageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = JoinVillageResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JoinVillageResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JoinVillageResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JoinVillageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVillagePostListRequest

@implementation GetVillagePostListRequest

@dynamic villageId;
@dynamic topId;
@dynamic bottomId;
@dynamic direction;

typedef struct GetVillagePostListRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t direction;
  int64_t villageId;
  int64_t topId;
  int64_t bottomId;
} GetVillagePostListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "villageId",
        .dataTypeSpecific.className = NULL,
        .number = GetVillagePostListRequest_FieldNumber_VillageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVillagePostListRequest__storage_, villageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "topId",
        .dataTypeSpecific.className = NULL,
        .number = GetVillagePostListRequest_FieldNumber_TopId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetVillagePostListRequest__storage_, topId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bottomId",
        .dataTypeSpecific.className = NULL,
        .number = GetVillagePostListRequest_FieldNumber_BottomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetVillagePostListRequest__storage_, bottomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "direction",
        .dataTypeSpecific.className = NULL,
        .number = GetVillagePostListRequest_FieldNumber_Direction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetVillagePostListRequest__storage_, direction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVillagePostListRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVillagePostListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\005\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetVillagePostListResponse

@implementation GetVillagePostListResponse

@dynamic hasRetCode, retCode;
@dynamic postsArray, postsArray_Count;

typedef struct GetVillagePostListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *postsArray;
} GetVillagePostListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetVillagePostListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetVillagePostListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "postsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PostOfVillage),
        .number = GetVillagePostListResponse_FieldNumber_PostsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetVillagePostListResponse__storage_, postsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetVillagePostListResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetVillagePostListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PostLikeRequest

@implementation PostLikeRequest

@dynamic postId;

typedef struct PostLikeRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t postId;
} PostLikeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "postId",
        .dataTypeSpecific.className = NULL,
        .number = PostLikeRequest_FieldNumber_PostId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PostLikeRequest__storage_, postId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PostLikeRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PostLikeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PostLikeResponse

@implementation PostLikeResponse

@dynamic hasRetCode, retCode;

typedef struct PostLikeResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
} PostLikeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = PostLikeResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PostLikeResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PostLikeResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PostLikeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PostAddRequest

@implementation PostAddRequest

@dynamic villageId;
@dynamic content;
@dynamic imagesArray, imagesArray_Count;
@dynamic hasAddress, address;

typedef struct PostAddRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  NSMutableArray *imagesArray;
  Location *address;
  int64_t villageId;
} PostAddRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "villageId",
        .dataTypeSpecific.className = NULL,
        .number = PostAddRequest_FieldNumber_VillageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PostAddRequest__storage_, villageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PostAddRequest_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PostAddRequest__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imagesArray",
        .dataTypeSpecific.className = NULL,
        .number = PostAddRequest_FieldNumber_ImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PostAddRequest__storage_, imagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .number = PostAddRequest_FieldNumber_Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PostAddRequest__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PostAddRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PostAddRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PostAddResponse

@implementation PostAddResponse

@dynamic hasRetCode, retCode;
@dynamic postId;

typedef struct PostAddResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  int64_t postId;
} PostAddResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = PostAddResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PostAddResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "postId",
        .dataTypeSpecific.className = NULL,
        .number = PostAddResponse_FieldNumber_PostId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PostAddResponse__storage_, postId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PostAddResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PostAddResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddCommentRequest

@implementation AddCommentRequest

@dynamic postId;
@dynamic centent;
@dynamic targeName;

typedef struct AddCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *centent;
  NSString *targeName;
  int64_t postId;
} AddCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "postId",
        .dataTypeSpecific.className = NULL,
        .number = AddCommentRequest_FieldNumber_PostId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddCommentRequest__storage_, postId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "centent",
        .dataTypeSpecific.className = NULL,
        .number = AddCommentRequest_FieldNumber_Centent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddCommentRequest__storage_, centent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targeName",
        .dataTypeSpecific.className = NULL,
        .number = AddCommentRequest_FieldNumber_TargeName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddCommentRequest__storage_, targeName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddCommentRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddCommentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddCommentResponse

@implementation AddCommentResponse

@dynamic hasRetCode, retCode;
@dynamic commentId;

typedef struct AddCommentResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  int64_t commentId;
} AddCommentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = AddCommentResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddCommentResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = AddCommentResponse_FieldNumber_CommentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddCommentResponse__storage_, commentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddCommentResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddCommentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommentListRequest

@implementation CommentListRequest

@dynamic postId;
@dynamic topId;
@dynamic bottomId;
@dynamic direction;

typedef struct CommentListRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t direction;
  int64_t postId;
  int64_t topId;
  int64_t bottomId;
} CommentListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "postId",
        .dataTypeSpecific.className = NULL,
        .number = CommentListRequest_FieldNumber_PostId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommentListRequest__storage_, postId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "topId",
        .dataTypeSpecific.className = NULL,
        .number = CommentListRequest_FieldNumber_TopId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommentListRequest__storage_, topId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bottomId",
        .dataTypeSpecific.className = NULL,
        .number = CommentListRequest_FieldNumber_BottomId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CommentListRequest__storage_, bottomId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "direction",
        .dataTypeSpecific.className = NULL,
        .number = CommentListRequest_FieldNumber_Direction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CommentListRequest__storage_, direction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommentListRequest class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommentListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\002\005\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommentListResponse

@implementation CommentListResponse

@dynamic hasRetCode, retCode;
@dynamic commentsArray, commentsArray_Count;

typedef struct CommentListResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSMutableArray *commentsArray;
} CommentListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = CommentListResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommentListResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Comment),
        .number = CommentListResponse_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CommentListResponse__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommentListResponse class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommentListResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Location

@implementation Location

@dynamic longitute;
@dynamic latitute;
@dynamic address;

typedef struct Location__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  double longitute;
  double latitute;
} Location__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "longitute",
        .dataTypeSpecific.className = NULL,
        .number = Location_FieldNumber_Longitute,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Location__storage_, longitute),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "latitute",
        .dataTypeSpecific.className = NULL,
        .number = Location_FieldNumber_Latitute,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Location__storage_, latitute),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = Location_FieldNumber_Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Location__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Location class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Location__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Villager

@implementation Villager

@dynamic id_p;
@dynamic name;
@dynamic avatar;

typedef struct Villager__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *avatar;
  int64_t id_p;
} Villager__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Villager_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Villager__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Villager_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Villager__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = Villager_FieldNumber_Avatar,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Villager__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Villager class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Villager__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Village

@implementation Village

@dynamic id_p;
@dynamic hasLocation, location;
@dynamic name;
@dynamic logo;
@dynamic cover;
@dynamic villageHeadName;
@dynamic villageHeadId;
@dynamic villagerCount;

typedef struct Village__storage_ {
  uint32_t _has_storage_[1];
  int32_t villagerCount;
  Location *location;
  NSString *name;
  NSString *logo;
  NSString *cover;
  NSString *villageHeadName;
  int64_t id_p;
  int64_t villageHeadId;
} Village__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Village_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Village__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .number = Village_FieldNumber_Location,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Village__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Village_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Village__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logo",
        .dataTypeSpecific.className = NULL,
        .number = Village_FieldNumber_Logo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Village__storage_, logo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cover",
        .dataTypeSpecific.className = NULL,
        .number = Village_FieldNumber_Cover,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Village__storage_, cover),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "villageHeadName",
        .dataTypeSpecific.className = NULL,
        .number = Village_FieldNumber_VillageHeadName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Village__storage_, villageHeadName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "villageHeadId",
        .dataTypeSpecific.className = NULL,
        .number = Village_FieldNumber_VillageHeadId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Village__storage_, villageHeadId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "villagerCount",
        .dataTypeSpecific.className = NULL,
        .number = Village_FieldNumber_VillagerCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Village__storage_, villagerCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Village class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Village__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\006\017\000\007\r\000\010\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PostOfVillage

@implementation PostOfVillage

@dynamic id_p;
@dynamic posterId;
@dynamic content;
@dynamic imagesArray, imagesArray_Count;
@dynamic time;
@dynamic hasAddress, address;
@dynamic likeCount;
@dynamic commentCount;
@dynamic liked;

typedef struct PostOfVillage__storage_ {
  uint32_t _has_storage_[1];
  int32_t likeCount;
  int32_t commentCount;
  NSString *content;
  NSMutableArray *imagesArray;
  Location *address;
  int64_t id_p;
  int64_t posterId;
  int64_t time;
} PostOfVillage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PostOfVillage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PostOfVillage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "posterId",
        .dataTypeSpecific.className = NULL,
        .number = PostOfVillage_FieldNumber_PosterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PostOfVillage__storage_, posterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = PostOfVillage_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PostOfVillage__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imagesArray",
        .dataTypeSpecific.className = NULL,
        .number = PostOfVillage_FieldNumber_ImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PostOfVillage__storage_, imagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PostOfVillage_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PostOfVillage__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .number = PostOfVillage_FieldNumber_Address,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PostOfVillage__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "likeCount",
        .dataTypeSpecific.className = NULL,
        .number = PostOfVillage_FieldNumber_LikeCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PostOfVillage__storage_, likeCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "commentCount",
        .dataTypeSpecific.className = NULL,
        .number = PostOfVillage_FieldNumber_CommentCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PostOfVillage__storage_, commentCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "liked",
        .dataTypeSpecific.className = NULL,
        .number = PostOfVillage_FieldNumber_Liked,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PostOfVillage class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PostOfVillage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\010\000\007\t\000\010\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Comment

@implementation Comment

@dynamic id_p;
@dynamic posterId;
@dynamic content;
@dynamic time;
@dynamic hasAddress, address;

typedef struct Comment__storage_ {
  uint32_t _has_storage_[1];
  NSString *content;
  Location *address;
  int64_t id_p;
  int64_t posterId;
  int64_t time;
} Comment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Comment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "posterId",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_PosterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Comment__storage_, posterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Comment__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Comment__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Location),
        .number = Comment_FieldNumber_Address,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Comment__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Comment class]
                                     rootClass:[VillageRoot class]
                                          file:VillageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Comment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
