// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/buytheway/protocol/users.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "com/buytheway/protocol/Users.pbobjc.h"
 #import "com/buytheway/protocol/Common.pbobjc.h"
 #import "com/buytheway/protocol/Business.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UsersRoot

@implementation UsersRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - UsersRoot_FileDescriptor

static GPBFileDescriptor *UsersRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.buytheway.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum IdentityTypeEnum

GPBEnumDescriptor *IdentityTypeEnum_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownIdentifyType\000Mobile\000Email\000Usernam"
        "e\000Facebook\000Wechat\000Twitter\000";
    static const int32_t values[] = {
        IdentityTypeEnum_UnknownIdentifyType,
        IdentityTypeEnum_Mobile,
        IdentityTypeEnum_Email,
        IdentityTypeEnum_Username,
        IdentityTypeEnum_Facebook,
        IdentityTypeEnum_Wechat,
        IdentityTypeEnum_Twitter,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(IdentityTypeEnum)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:IdentityTypeEnum_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL IdentityTypeEnum_IsValidValue(int32_t value__) {
  switch (value__) {
    case IdentityTypeEnum_UnknownIdentifyType:
    case IdentityTypeEnum_Mobile:
    case IdentityTypeEnum_Email:
    case IdentityTypeEnum_Username:
    case IdentityTypeEnum_Facebook:
    case IdentityTypeEnum_Wechat:
    case IdentityTypeEnum_Twitter:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SmsType

GPBEnumDescriptor *SmsType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownSmsType\000Register\000Resetpwd\000";
    static const int32_t values[] = {
        SmsType_UnknownSmsType,
        SmsType_Register,
        SmsType_Resetpwd,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SmsType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SmsType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SmsType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SmsType_UnknownSmsType:
    case SmsType_Register:
    case SmsType_Resetpwd:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetPubKeyRequest

@implementation GetPubKeyRequest

@dynamic account;
@dynamic aesKey;

typedef struct GetPubKeyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *account;
  NSData *aesKey;
} GetPubKeyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = GetPubKeyRequest_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPubKeyRequest__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aesKey",
        .dataTypeSpecific.className = NULL,
        .number = GetPubKeyRequest_FieldNumber_AesKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPubKeyRequest__storage_, aesKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPubKeyRequest class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPubKeyRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPubKeyResponse

@implementation GetPubKeyResponse

@dynamic hasRetCode, retCode;
@dynamic token;
@dynamic rsaModule;
@dynamic rsaPubKey;

typedef struct GetPubKeyResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  NSString *token;
  NSData *rsaModule;
  NSData *rsaPubKey;
} GetPubKeyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetPubKeyResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPubKeyResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GetPubKeyResponse_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPubKeyResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rsaModule",
        .dataTypeSpecific.className = NULL,
        .number = GetPubKeyResponse_FieldNumber_RsaModule,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPubKeyResponse__storage_, rsaModule),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "rsaPubKey",
        .dataTypeSpecific.className = NULL,
        .number = GetPubKeyResponse_FieldNumber_RsaPubKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetPubKeyResponse__storage_, rsaPubKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPubKeyResponse class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPubKeyResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\004\t\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterRequest

@implementation RegisterRequest

@dynamic hasPhoneNumber, phoneNumber;
@dynamic code;
@dynamic pwd;
@dynamic nickName;
@dynamic identityType;
@dynamic identifier;
@dynamic credential;
@dynamic isBind;

typedef struct RegisterRequest__storage_ {
  uint32_t _has_storage_[1];
  IdentityTypeEnum identityType;
  int32_t isBind;
  PhoneNumber *phoneNumber;
  NSString *code;
  NSString *pwd;
  NSString *nickName;
  NSString *identifier;
  NSString *credential;
} RegisterRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumber),
        .number = RegisterRequest_FieldNumber_PhoneNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, phoneNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_Pwd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, pwd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_NickName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityType",
        .dataTypeSpecific.enumDescFunc = IdentityTypeEnum_EnumDescriptor,
        .number = RegisterRequest_FieldNumber_IdentityType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, identityType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "identifier",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_Identifier,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, identifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "credential",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_Credential,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, credential),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isBind",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_IsBind,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, isBind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterRequest class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\013\000\004\010\000\005\014\000\010\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RegisterRequest_IdentityType_RawValue(RegisterRequest *message) {
  GPBDescriptor *descriptor = [RegisterRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RegisterRequest_FieldNumber_IdentityType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRegisterRequest_IdentityType_RawValue(RegisterRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RegisterRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RegisterRequest_FieldNumber_IdentityType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RegisterResponse

@implementation RegisterResponse

@dynamic hasRetCode, retCode;
@dynamic hasUser, user;

typedef struct RegisterResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  User *user;
} RegisterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = RegisterResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = RegisterResponse_FieldNumber_User,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterResponse class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSmsRequest

@implementation GetSmsRequest

@dynamic hasPhoneNumber, phoneNumber;
@dynamic smsType;

typedef struct GetSmsRequest__storage_ {
  uint32_t _has_storage_[1];
  SmsType smsType;
  PhoneNumber *phoneNumber;
} GetSmsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumber),
        .number = GetSmsRequest_FieldNumber_PhoneNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSmsRequest__storage_, phoneNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "smsType",
        .dataTypeSpecific.enumDescFunc = SmsType_EnumDescriptor,
        .number = GetSmsRequest_FieldNumber_SmsType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSmsRequest__storage_, smsType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSmsRequest class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSmsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetSmsRequest_SmsType_RawValue(GetSmsRequest *message) {
  GPBDescriptor *descriptor = [GetSmsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetSmsRequest_FieldNumber_SmsType];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetSmsRequest_SmsType_RawValue(GetSmsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetSmsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetSmsRequest_FieldNumber_SmsType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetSmsResponse

@implementation GetSmsResponse

@dynamic hasRetCode, retCode;

typedef struct GetSmsResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
} GetSmsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetSmsResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSmsResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSmsResponse class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSmsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterAfterRequest

@implementation RegisterAfterRequest

@dynamic userBizid;
@dynamic nickName;
@dynamic headImage;
@dynamic country;
@dynamic language;
@dynamic currencynUit;
@dynamic aliCreditScore;
@dynamic geiTuiPushId;
@dynamic apnsId;
@dynamic gpnsId;

typedef struct RegisterAfterRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userBizid;
  NSString *nickName;
  NSString *headImage;
  NSString *country;
  NSString *language;
  NSString *currencynUit;
  NSString *aliCreditScore;
  NSString *geiTuiPushId;
  NSString *apnsId;
  NSString *gpnsId;
} RegisterAfterRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userBizid",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_UserBizid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, userBizid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImage",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_HeadImage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, headImage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_Country,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, country),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_Language,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "currencynUit",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_CurrencynUit,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, currencynUit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aliCreditScore",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_AliCreditScore,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, aliCreditScore),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "geiTuiPushId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_GeiTuiPushId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, geiTuiPushId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "apnsId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_ApnsId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, apnsId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gpnsId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterAfterRequest_FieldNumber_GpnsId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RegisterAfterRequest__storage_, gpnsId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterAfterRequest class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterAfterRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\t\000\002\010\000\003\t\000\014\014\000\024\016\000\036\014\000\037\006\000 \006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterAfterResponse

@implementation RegisterAfterResponse

@dynamic hasRetCode, retCode;

typedef struct RegisterAfterResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
} RegisterAfterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = RegisterAfterResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterAfterResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterAfterResponse class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterAfterResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LoginRequest

@implementation LoginRequest

@dynamic identityType;
@dynamic identifier;
@dynamic credential;
@dynamic aesKey;
@dynamic deviceType;

typedef struct LoginRequest__storage_ {
  uint32_t _has_storage_[1];
  IdentityTypeEnum identityType;
  int32_t deviceType;
  NSString *identifier;
  NSString *credential;
  NSData *aesKey;
} LoginRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "identityType",
        .dataTypeSpecific.enumDescFunc = IdentityTypeEnum_EnumDescriptor,
        .number = LoginRequest_FieldNumber_IdentityType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginRequest__storage_, identityType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "identifier",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequest_FieldNumber_Identifier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginRequest__storage_, identifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "credential",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequest_FieldNumber_Credential,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginRequest__storage_, credential),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aesKey",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequest_FieldNumber_AesKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginRequest__storage_, aesKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequest_FieldNumber_DeviceType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LoginRequest__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginRequest class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\014\000\004\006\000\005\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LoginRequest_IdentityType_RawValue(LoginRequest *message) {
  GPBDescriptor *descriptor = [LoginRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LoginRequest_FieldNumber_IdentityType];
  return GPBGetMessageInt32Field(message, field);
}

void SetLoginRequest_IdentityType_RawValue(LoginRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [LoginRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LoginRequest_FieldNumber_IdentityType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LoginResponse

@implementation LoginResponse

@dynamic hasRetCode, retCode;
@dynamic hasUser, user;
@dynamic token;
@dynamic signKey;

typedef struct LoginResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  User *user;
  NSString *token;
  NSString *signKey;
} LoginResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = LoginResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = LoginResponse_FieldNumber_User,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = LoginResponse_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signKey",
        .dataTypeSpecific.className = NULL,
        .number = LoginResponse_FieldNumber_SignKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginResponse__storage_, signKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginResponse class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BindThirdUserRequest

@implementation BindThirdUserRequest

@dynamic userBizid;
@dynamic identityType;
@dynamic identifier;
@dynamic credential;

typedef struct BindThirdUserRequest__storage_ {
  uint32_t _has_storage_[1];
  IdentityTypeEnum identityType;
  NSString *userBizid;
  NSString *identifier;
  NSString *credential;
} BindThirdUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userBizid",
        .dataTypeSpecific.className = NULL,
        .number = BindThirdUserRequest_FieldNumber_UserBizid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BindThirdUserRequest__storage_, userBizid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityType",
        .dataTypeSpecific.enumDescFunc = IdentityTypeEnum_EnumDescriptor,
        .number = BindThirdUserRequest_FieldNumber_IdentityType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BindThirdUserRequest__storage_, identityType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "identifier",
        .dataTypeSpecific.className = NULL,
        .number = BindThirdUserRequest_FieldNumber_Identifier,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BindThirdUserRequest__storage_, identifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "credential",
        .dataTypeSpecific.className = NULL,
        .number = BindThirdUserRequest_FieldNumber_Credential,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BindThirdUserRequest__storage_, credential),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BindThirdUserRequest class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BindThirdUserRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BindThirdUserRequest_IdentityType_RawValue(BindThirdUserRequest *message) {
  GPBDescriptor *descriptor = [BindThirdUserRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BindThirdUserRequest_FieldNumber_IdentityType];
  return GPBGetMessageInt32Field(message, field);
}

void SetBindThirdUserRequest_IdentityType_RawValue(BindThirdUserRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [BindThirdUserRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BindThirdUserRequest_FieldNumber_IdentityType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - BindThirdUserResponse

@implementation BindThirdUserResponse

@dynamic hasRetCode, retCode;

typedef struct BindThirdUserResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
} BindThirdUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = BindThirdUserResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BindThirdUserResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BindThirdUserResponse class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BindThirdUserResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResetPwdRequest

@implementation ResetPwdRequest

@dynamic hasPhoneNumber, phoneNumber;
@dynamic code;
@dynamic pwd;

typedef struct ResetPwdRequest__storage_ {
  uint32_t _has_storage_[1];
  PhoneNumber *phoneNumber;
  NSString *code;
  NSString *pwd;
} ResetPwdRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumber),
        .number = ResetPwdRequest_FieldNumber_PhoneNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResetPwdRequest__storage_, phoneNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = ResetPwdRequest_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResetPwdRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pwd",
        .dataTypeSpecific.className = NULL,
        .number = ResetPwdRequest_FieldNumber_Pwd,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResetPwdRequest__storage_, pwd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResetPwdRequest class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResetPwdRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResetPwdResponse

@implementation ResetPwdResponse

@dynamic hasRetCode, retCode;

typedef struct ResetPwdResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
} ResetPwdResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = ResetPwdResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResetPwdResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResetPwdResponse class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResetPwdResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - User

@implementation User

@dynamic userBizid;
@dynamic hasPhoneNumber, phoneNumber;
@dynamic nickName;
@dynamic name;
@dynamic headImage;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  NSString *userBizid;
  PhoneNumber *phoneNumber;
  NSString *nickName;
  NSString *name;
  NSString *headImage;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userBizid",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserBizid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, userBizid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumber),
        .number = User_FieldNumber_PhoneNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, phoneNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImage",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_HeadImage,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, headImage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[UsersRoot class]
                                          file:UsersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\013\000\003\010\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
