// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/buytheway/protocol/orders.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "com/buytheway/protocol/Orders.pbobjc.h"
 #import "com/buytheway/protocol/Common.pbobjc.h"
 #import "com/buytheway/protocol/Business.pbobjc.h"
 #import "com/buytheway/protocol/Amount.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - OrdersRoot

@implementation OrdersRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OrdersRoot_FileDescriptor

static GPBFileDescriptor *OrdersRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.buytheway.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GetBuyOrderInfoRequest

@implementation GetBuyOrderInfoRequest

@dynamic orderId;

typedef struct GetBuyOrderInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} GetBuyOrderInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetBuyOrderInfoRequest_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBuyOrderInfoRequest__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBuyOrderInfoRequest class]
                                     rootClass:[OrdersRoot class]
                                          file:OrdersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBuyOrderInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBuyOrderInfoResponse

@implementation GetBuyOrderInfoResponse

@dynamic hasRetCode, retCode;
@dynamic hasOrderInfo, orderInfo;
@dynamic mes;

typedef struct GetBuyOrderInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  OrderInfo *orderInfo;
  NSString *mes;
} GetBuyOrderInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetBuyOrderInfoResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBuyOrderInfoResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderInfo),
        .number = GetBuyOrderInfoResponse_FieldNumber_OrderInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBuyOrderInfoResponse__storage_, orderInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mes",
        .dataTypeSpecific.className = NULL,
        .number = GetBuyOrderInfoResponse_FieldNumber_Mes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetBuyOrderInfoResponse__storage_, mes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBuyOrderInfoResponse class]
                                     rootClass:[OrdersRoot class]
                                          file:OrdersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBuyOrderInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSellOrderInfoRequest

@implementation GetSellOrderInfoRequest

@dynamic orderId;

typedef struct GetSellOrderInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *orderId;
} GetSellOrderInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = GetSellOrderInfoRequest_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSellOrderInfoRequest__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSellOrderInfoRequest class]
                                     rootClass:[OrdersRoot class]
                                          file:OrdersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSellOrderInfoRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSellOrderInfoResponse

@implementation GetSellOrderInfoResponse

@dynamic hasRetCode, retCode;
@dynamic hasOrderInfo, orderInfo;
@dynamic mes;

typedef struct GetSellOrderInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
  OrderInfo *orderInfo;
  NSString *mes;
} GetSellOrderInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = GetSellOrderInfoResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSellOrderInfoResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "orderInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderInfo),
        .number = GetSellOrderInfoResponse_FieldNumber_OrderInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSellOrderInfoResponse__storage_, orderInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mes",
        .dataTypeSpecific.className = NULL,
        .number = GetSellOrderInfoResponse_FieldNumber_Mes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetSellOrderInfoResponse__storage_, mes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSellOrderInfoResponse class]
                                     rootClass:[OrdersRoot class]
                                          file:OrdersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSellOrderInfoResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderInfo

@implementation OrderInfo

@dynamic orderId;
@dynamic status;
@dynamic buyTripTaskId;
@dynamic sellTripTaskId;
@dynamic hasMoney, money;
@dynamic discardReason;

typedef struct OrderInfo__storage_ {
  uint32_t _has_storage_[1];
  OrderStatus status;
  NSString *orderId;
  NSString *buyTripTaskId;
  NSString *sellTripTaskId;
  Money *money;
  NSString *discardReason;
} OrderInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orderId",
        .dataTypeSpecific.className = NULL,
        .number = OrderInfo_FieldNumber_OrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderInfo__storage_, orderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = OrderStatus_EnumDescriptor,
        .number = OrderInfo_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "buyTripTaskId",
        .dataTypeSpecific.className = NULL,
        .number = OrderInfo_FieldNumber_BuyTripTaskId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderInfo__storage_, buyTripTaskId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sellTripTaskId",
        .dataTypeSpecific.className = NULL,
        .number = OrderInfo_FieldNumber_SellTripTaskId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderInfo__storage_, sellTripTaskId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "money",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = OrderInfo_FieldNumber_Money,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderInfo__storage_, money),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "discardReason",
        .dataTypeSpecific.className = NULL,
        .number = OrderInfo_FieldNumber_DiscardReason,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderInfo__storage_, discardReason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderInfo class]
                                     rootClass:[OrdersRoot class]
                                          file:OrdersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\003\r\000\004\016\000\n\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OrderInfo_Status_RawValue(OrderInfo *message) {
  GPBDescriptor *descriptor = [OrderInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OrderInfo_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetOrderInfo_Status_RawValue(OrderInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OrderInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OrderInfo_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
