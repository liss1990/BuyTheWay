// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/buytheway/protocol/cardauth.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "com/buytheway/protocol/Cardauth.pbobjc.h"
 #import "com/buytheway/protocol/Common.pbobjc.h"
 #import "com/buytheway/protocol/Business.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CardauthRoot

@implementation CardauthRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CardauthRoot_FileDescriptor

static GPBFileDescriptor *CardauthRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.buytheway.protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CheckUserCardAuthRequest

@implementation CheckUserCardAuthRequest

@dynamic userBizid;

typedef struct CheckUserCardAuthRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userBizid;
} CheckUserCardAuthRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userBizid",
        .dataTypeSpecific.className = NULL,
        .number = CheckUserCardAuthRequest_FieldNumber_UserBizid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckUserCardAuthRequest__storage_, userBizid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckUserCardAuthRequest class]
                                     rootClass:[CardauthRoot class]
                                          file:CardauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckUserCardAuthRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckUserCardAuthResponse

@implementation CheckUserCardAuthResponse

@dynamic hasRetCode, retCode;
@dynamic status;
@dynamic rejectReason;

typedef struct CheckUserCardAuthResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  int32_t rejectReason;
  RetCode *retCode;
} CheckUserCardAuthResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = CheckUserCardAuthResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckUserCardAuthResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = CheckUserCardAuthResponse_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckUserCardAuthResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rejectReason",
        .dataTypeSpecific.className = NULL,
        .number = CheckUserCardAuthResponse_FieldNumber_RejectReason,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CheckUserCardAuthResponse__storage_, rejectReason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckUserCardAuthResponse class]
                                     rootClass:[CardauthRoot class]
                                          file:CardauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckUserCardAuthResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserCardAuthRequest

@implementation UserCardAuthRequest

@dynamic userBizid;
@dynamic cardType;
@dynamic cardName;
@dynamic cardNo;
@dynamic cardImagepU;
@dynamic cardImageDown;
@dynamic cardImageSelfie;
@dynamic cardImageAtt1;

typedef struct UserCardAuthRequest__storage_ {
  uint32_t _has_storage_[1];
  CardTypeEnum cardType;
  NSString *userBizid;
  NSString *cardName;
  NSString *cardNo;
  NSString *cardImagepU;
  NSString *cardImageDown;
  NSString *cardImageSelfie;
  NSString *cardImageAtt1;
} UserCardAuthRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userBizid",
        .dataTypeSpecific.className = NULL,
        .number = UserCardAuthRequest_FieldNumber_UserBizid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserCardAuthRequest__storage_, userBizid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardType",
        .dataTypeSpecific.enumDescFunc = CardTypeEnum_EnumDescriptor,
        .number = UserCardAuthRequest_FieldNumber_CardType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserCardAuthRequest__storage_, cardType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cardName",
        .dataTypeSpecific.className = NULL,
        .number = UserCardAuthRequest_FieldNumber_CardName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserCardAuthRequest__storage_, cardName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardNo",
        .dataTypeSpecific.className = NULL,
        .number = UserCardAuthRequest_FieldNumber_CardNo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserCardAuthRequest__storage_, cardNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardImagepU",
        .dataTypeSpecific.className = NULL,
        .number = UserCardAuthRequest_FieldNumber_CardImagepU,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserCardAuthRequest__storage_, cardImagepU),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardImageDown",
        .dataTypeSpecific.className = NULL,
        .number = UserCardAuthRequest_FieldNumber_CardImageDown,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserCardAuthRequest__storage_, cardImageDown),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardImageSelfie",
        .dataTypeSpecific.className = NULL,
        .number = UserCardAuthRequest_FieldNumber_CardImageSelfie,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UserCardAuthRequest__storage_, cardImageSelfie),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardImageAtt1",
        .dataTypeSpecific.className = NULL,
        .number = UserCardAuthRequest_FieldNumber_CardImageAtt1,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UserCardAuthRequest__storage_, cardImageAtt1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserCardAuthRequest class]
                                     rootClass:[CardauthRoot class]
                                          file:CardauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserCardAuthRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\t\000\002\010\000\003\010\000\004\006\000\005\013\000\006\r\000\007\017\000\010\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserCardAuthRequest_CardType_RawValue(UserCardAuthRequest *message) {
  GPBDescriptor *descriptor = [UserCardAuthRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserCardAuthRequest_FieldNumber_CardType];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserCardAuthRequest_CardType_RawValue(UserCardAuthRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [UserCardAuthRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserCardAuthRequest_FieldNumber_CardType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UserCardAuthResponse

@implementation UserCardAuthResponse

@dynamic hasRetCode, retCode;

typedef struct UserCardAuthResponse__storage_ {
  uint32_t _has_storage_[1];
  RetCode *retCode;
} UserCardAuthResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retCode",
        .dataTypeSpecific.className = GPBStringifySymbol(RetCode),
        .number = UserCardAuthResponse_FieldNumber_RetCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserCardAuthResponse__storage_, retCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserCardAuthResponse class]
                                     rootClass:[CardauthRoot class]
                                          file:CardauthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserCardAuthResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
